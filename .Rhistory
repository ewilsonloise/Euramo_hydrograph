param <- dplyr::case_when(
param == "level" ~ "varfrom=100.00&varto=100.00",
param == "discharge" ~ "varfrom=100.00&varto=140.00",
# param == "preservedQ" ~ "varfrom=140.00&varto=140.00",
param == "rainfall" ~ "varfrom=10.00&varto=10.00",
# param == "temperature" ~ "varfrom=2080.00&varto=2080.00",
# param == "conductivity" ~ "varfrom=2010.00&varto=2010.00",
# param == "pH" ~ "varfrom=2100.00&varto=2100.00",
# param == "turbidity" ~ "varfrom=2030.00&varto=2030.00"
)
param <- dplyr::case_when(
param == "level" ~ "varfrom=100.00&varto=100.00",
param == "discharge" ~ "varfrom=100.00&varto=140.00",
# param == "preservedQ" ~ "varfrom=140.00&varto=140.00",
param == "rainfall" ~ "varfrom=10.00&varto=10.00",
# param == "temperature" ~ "varfrom=2080.00&varto=2080.00",
# param == "conductivity" ~ "varfrom=2010.00&varto=2010.00",
# param == "pH" ~ "varfrom=2100.00&varto=2100.00",
# param == "turbidity" ~ "varfrom=2030.00&varto=2030.00"
)
library(dplyr)
param <- dplyr::case_when(
param == "level" ~ "varfrom=100.00&varto=100.00",
param == "discharge" ~ "varfrom=100.00&varto=140.00",
# param == "preservedQ" ~ "varfrom=140.00&varto=140.00",
param == "rainfall" ~ "varfrom=10.00&varto=10.00",
# param == "temperature" ~ "varfrom=2080.00&varto=2080.00",
# param == "conductivity" ~ "varfrom=2010.00&varto=2010.00",
# param == "pH" ~ "varfrom=2100.00&varto=2100.00",
# param == "turbidity" ~ "varfrom=2030.00&varto=2030.00"
)
library(dplyr)
WMIP_Extract <- function (WMIPID, START, param = "level", datasource = "AT",
END = format(Sys.Date() + 1, "%Y%m%d"),
type = "mean", interval = "hour", report = "start")
)
library(waterQUAC)
wmip_hist <- function(site_id, var = "level", datasource = "AT", start_time, end_time = format(Sys.Date() + 1, "%Y%m%d")){
var <- dplyr::case_when(
var == "level" ~ "varfrom=100.00&varto=100.00",
var == "discharge" ~ "varfrom=100.00&varto=140.00",
var == "rainfall" ~ "varfrom=10.00&varto=10.00",
var == "temperature" ~ "varfrom=2080.00&varto=2080.00",
var == "conductivity" ~ "varfrom=2010.00&varto=2010.00",
var == "pH" ~ "varfrom=2100.00&varto=2100.00",
var == "turbidity" ~ "varfrom=2030.00&varto=2030.00"
)
}
wmip_hist <- function(site_id, var = "level", datasource = "AT", start_time, end_time = format(Sys.Date() + 1, "%Y%m%d")){
var <- dplyr::case_when(
var == "level" ~ "varfrom=100.00&varto=100.00",
var == "discharge" ~ "varfrom=100.00&varto=140.00",
var == "rainfall" ~ "varfrom=10.00&varto=10.00",
var == "temperature" ~ "varfrom=2080.00&varto=2080.00",
var == "conductivity" ~ "varfrom=2010.00&varto=2010.00",
var == "pH" ~ "varfrom=2100.00&varto=2100.00",
var == "turbidity" ~ "varfrom=2030.00&varto=2030.00"
)}
WMIP_URL <- paste("https://water-monitoring.information.qld.gov.au/cgi/webservice.exe?function=get_ts_traces&site_list=",site_id,"&datasource=",datasource,"&",var,"&start_time=",start_time,"&end_time=",end_time,"&data_type=mean&interval=hour&multiplier=1&format=csv")
site_id
WMIP_URL <- paste("https://water-monitoring.information.qld.gov.au/cgi/webservice.exe?function=get_ts_traces&site_list=",site_id,"&datasource=",datasource,"&",var,"&start_time=",start_time,"&end_time=",end_time,"&data_type=mean&interval=hour&multiplier=1&format=csv")
site_id = '113006A'
wmip_hist <- function(site_id, var = "level", datasource = "AT", start_time, end_time = format(Sys.Date() + 1, "%Y%m%d")){
var <- dplyr::case_when(
var == "level" ~ "varfrom=100.00&varto=100.00",
var == "discharge" ~ "varfrom=100.00&varto=140.00",
var == "rainfall" ~ "varfrom=10.00&varto=10.00",
var == "temperature" ~ "varfrom=2080.00&varto=2080.00",
var == "conductivity" ~ "varfrom=2010.00&varto=2010.00",
var == "pH" ~ "varfrom=2100.00&varto=2100.00",
var == "turbidity" ~ "varfrom=2030.00&varto=2030.00"
)}
WMIP_URL <- paste("https://water-monitoring.information.qld.gov.au/cgi/webservice.exe?function=get_ts_traces&site_list=",site_id,"&datasource=",datasource,"&",var,"&start_time=",start_time,"&end_time=",end_time,"&data_type=mean&interval=hour&multiplier=1&format=csv")
datasource = "AT"
wmip_hist <- function(site_id, var = "level", datasource = "AT", start_time, end_time = format(Sys.Date() + 1, "%Y%m%d")){
var <- dplyr::case_when(
var == "level" ~ "varfrom=100.00&varto=100.00",
var == "discharge" ~ "varfrom=100.00&varto=140.00",
var == "rainfall" ~ "varfrom=10.00&varto=10.00",
var == "temperature" ~ "varfrom=2080.00&varto=2080.00",
var == "conductivity" ~ "varfrom=2010.00&varto=2010.00",
var == "pH" ~ "varfrom=2100.00&varto=2100.00",
var == "turbidity" ~ "varfrom=2030.00&varto=2030.00"
)}
WMIP_URL <- paste("https://water-monitoring.information.qld.gov.au/cgi/webservice.exe?function=get_ts_traces&site_list=",site_id,"&datasource=",datasource,"&",var,"&start_time=",start_time,"&end_time=",end_time,"&data_type=mean&interval=hour&multiplier=1&format=csv")
EuramoQ <- wmip_hist("113006A", start_time = format(as.POSIXct("2009-01-01 00:00"), "%Y%m%d"),
param = "rainfall", type = "point", datasource = "AT")
EuramoQ <- wmip_hist("113006A", start_time = format(as.POSIXct("2009-01-01 00:00"), "%Y%m%d"),
param = "rainfall", type = "point", datasource = "AT")
param = "rainfall"
type = "point"
EuramoQ <- wmip_hist("113006A", start_time = format(as.POSIXct("2009-01-01 00:00"), "%Y%m%d"),
param = "rainfall", type = "point", datasource = "AT")
df_test <- wmip_hist(site_id = "113006A", start_time = "20090101", var = "rainfall")
df_test <- wmip_hist(site_id = "113006A", start_time = "20090101", var = "rainfall")
library(dplyr)
WMIP_Extract <- function (WMIPID, START, param = "level", datasource = "AT",
END = format(Sys.Date() + 1, "%Y%m%d"),
type = "mean", interval = "hour", report = "start") {
stopifnot("type must be max, min, mean, end, tot, cum, inst, point" =
type %in% c( "max", "min", "mean", "end", "tot", "cum", "inst", "point" ) )
stopifnot("interval must be year, month, day, hour, minute, second" =
interval %in% c( "year", "month", "day", "hour", "minute", "second" ) )
stopifnot("report must be start or end" =
report %in% c( "start", "end") )
param <- dplyr::case_when(
param == "level" ~ "varfrom=100.00&varto=100.00",
param == "discharge" ~ "varfrom=100.00&varto=140.00",
param == "preservedQ" ~ "varfrom=140.00&varto=140.00",
param == "rainfall" ~ "varfrom=10.00&varto=10.00",
param == "temperature" ~ "varfrom=2080.00&varto=2080.00",
param == "conductivity" ~ "varfrom=2010.00&varto=2010.00",
param == "pH" ~ "varfrom=2100.00&varto=2100.00",
param == "turbidity" ~ "varfrom=2030.00&varto=2030.00"
)
WMIP_URL <- paste("https://water-monitoring.information.qld.gov.au/cgi/webservice.pl?function=get_ts_traces&site_list=",
WMIPID, "&datasource=", datasource, "&",
param, "&start_time=", START, "&end_time=",
END, "&data_type=",type,"&interval=",interval,
"&report_time=",report,"&multiplier=1&format=csv", sep = "")
API <- httr::GET(WMIP_URL, timeout = 30)
WMIPData <- readr::read_csv(rawToChar(API$content))
if (grepl("error", names(WMIPData)[1])) {
WMIPData <- tibble::tibble("site" = WMIPID,
"varname" = param,
"var" = "error",
"time" = NA,
"value" = NA,
"quality" = NA,
)
} else {
WMIPData$time <- as.POSIXct(sprintf("%1.0f", WMIPData$time), format="%Y%m%d%H%M%S", origin = "1970-01-01")
}
return(WMIPData)
}
WMIP_Extract <- function (WMIPID, START, param = "level", datasource = "AT",
END = format(Sys.Date() + 1, "%Y%m%d"),
type = "mean", interval = "hour", report = "start") {
stopifnot("type must be max, min, mean, end, tot, cum, inst, point" =
type %in% c( "max", "min", "mean", "end", "tot", "cum", "inst", "point" ) )
stopifnot("interval must be year, month, day, hour, minute, second" =
interval %in% c( "year", "month", "day", "hour", "minute", "second" ) )
stopifnot("report must be start or end" =
report %in% c( "start", "end") )
param <- dplyr::case_when(
param == "level" ~ "varfrom=100.00&varto=100.00",
param == "discharge" ~ "varfrom=100.00&varto=140.00",
param == "preservedQ" ~ "varfrom=140.00&varto=140.00",
param == "rainfall" ~ "varfrom=10.00&varto=10.00",
param == "temperature" ~ "varfrom=2080.00&varto=2080.00",
param == "conductivity" ~ "varfrom=2010.00&varto=2010.00",
param == "pH" ~ "varfrom=2100.00&varto=2100.00",
param == "turbidity" ~ "varfrom=2030.00&varto=2030.00"
)
WMIP_URL <- paste("https://water-monitoring.information.qld.gov.au/cgi/webservice.pl?function=get_ts_traces&site_list=",
WMIPID, "&datasource=", datasource, "&",
param, "&start_time=", START, "&end_time=",
END, "&data_type=",type,"&interval=",interval,
"&report_time=",report,"&multiplier=1&format=csv", sep = "")
API <- httr::GET(WMIP_URL, timeout = 30)
WMIPData <- readr::read_csv(rawToChar(API$content))
if (grepl("error", names(WMIPData)[1])) {
WMIPData <- tibble::tibble("site" = WMIPID,
"varname" = param,
"var" = "error",
"time" = NA,
"value" = NA,
"quality" = NA,
)
} else {
WMIPData$time <- as.POSIXct(sprintf("%1.0f", WMIPData$time), format="%Y%m%d%H%M%S", origin = "1970-01-01")
}
return(WMIPData)
}
library(dplyr)
WMIP_Extract <- function (WMIPID, START, param = "level", datasource = "AT",
END = format(Sys.Date() + 1, "%Y%m%d"),
type = "mean", interval = "hour", report = "start") {
stopifnot("type must be max, min, mean, end, tot, cum, inst, point" =
type %in% c( "max", "min", "mean", "end", "tot", "cum", "inst", "point" ) )
stopifnot("interval must be year, month, day, hour, minute, second" =
interval %in% c( "year", "month", "day", "hour", "minute", "second" ) )
stopifnot("report must be start or end" =
report %in% c( "start", "end") )
param <- dplyr::case_when(
param == "level" ~ "varfrom=100.00&varto=100.00",
param == "discharge" ~ "varfrom=100.00&varto=140.00",
#param == "preservedQ" ~ "varfrom=140.00&varto=140.00",
param == "rainfall" ~ "varfrom=10.00&varto=10.00",
#param == "temperature" ~ "varfrom=2080.00&varto=2080.00",
#param == "conductivity" ~ "varfrom=2010.00&varto=2010.00",
#param == "pH" ~ "varfrom=2100.00&varto=2100.00",
#param == "turbidity" ~ "varfrom=2030.00&varto=2030.00"
)
WMIP_URL <- paste("https://water-monitoring.information.qld.gov.au/cgi/webservice.pl?function=get_ts_traces&site_list=",
WMIPID, "&datasource=", datasource, "&",
param, "&start_time=", START, "&end_time=",
END, "&data_type=",type,"&interval=",interval,
"&report_time=",report,"&multiplier=1&format=csv", sep = "")
API <- httr::GET(WMIP_URL, timeout = 30)
WMIPData <- readr::read_csv(rawToChar(API$content))
if (grepl("error", names(WMIPData)[1])) {
WMIPData <- tibble::tibble("site" = WMIPID,
"varname" = param,
"var" = "error",
"time" = NA,
"value" = NA,
"quality" = NA,
)
} else {
WMIPData$time <- as.POSIXct(sprintf("%1.0f", WMIPData$time), format="%Y%m%d%H%M%S", origin = "1970-01-01")
}
return(WMIPData)
}
EuramoRainfall <- WMIP_Extract("113006A", START = format(as.POSIXct("2009-01-01 00:00"), "%Y%m%d"),
param = "Rainfall", type = "point", datasource = "AT")
EuramoRainfall <- WMIP_Extract("113006A", START = format(as.POSIXct("2009-01-01 00:00"), "%Y%m%d"),
param = "Rainfall", type = "point", datasource = "AT")
problems(EuramoRainfall)
print(rawToChar(API$content))
API <- httr::GET(WMIP_URL, timeout = 30)
WMIP_URL <- paste("https://water-monitoring.information.qld.gov.au/cgi/webservice.pl?function=get_ts_traces&site_list=",
WMIPID, "&datasource=", datasource, "&",
param, "&start_time=", START, "&end_time=",
END, "&data_type=",type,"&interval=",interval,
"&report_time=",report,"&multiplier=1&format=csv", sep = "")
WMIP_URL <- paste("https://water-monitoring.information.qld.gov.au/cgi/webservice.pl?function=get_ts_traces&site_list=143001C&datasource=AT&var_list=100.00,10.00&start_time=20200526000000&end_time=20200528000000&data_type=point&interval=day&report_time=end&multiplier=1&format=csv",
WMIPID, "&datasource=", datasource, "&",
param, "&start_time=", START, "&end_time=",
END, "&data_type=",type,"&interval=",interval,
"&report_time=",report,"&multiplier=1&format=csv", sep = "")
library(dplyr)
WMIP_Extract <- function (WMIPID, START, param = "level", datasource = "AT",
END = format(Sys.Date() + 1, "%Y%m%d"),
type = "mean", interval = "hour", report = "start") {
stopifnot("type must be max, min, mean, end, tot, cum, inst, point" =
type %in% c( "max", "min", "mean", "end", "tot", "cum", "inst", "point" ) )
stopifnot("interval must be year, month, day, hour, minute, second" =
interval %in% c( "year", "month", "day", "hour", "minute", "second" ) )
stopifnot("report must be start or end" =
report %in% c( "start", "end") )
param <- dplyr::case_when(
param == "level" ~ "varfrom=100.00&varto=100.00",
param == "discharge" ~ "varfrom=100.00&varto=140.00",
#param == "preservedQ" ~ "varfrom=140.00&varto=140.00",
param == "rainfall" ~ "varfrom=10.00&varto=10.00",
#param == "temperature" ~ "varfrom=2080.00&varto=2080.00",
#param == "conductivity" ~ "varfrom=2010.00&varto=2010.00",
#param == "pH" ~ "varfrom=2100.00&varto=2100.00",
#param == "turbidity" ~ "varfrom=2030.00&varto=2030.00"
)
WMIP_URL <- paste("https://water-monitoring.information.qld.gov.au/cgi/webservice.pl?function=get_ts_traces&site_list=143001C&datasource=AT&var_list=100.00,10.00&start_time=20200526000000&end_time=20200528000000&data_type=point&interval=day&report_time=end&multiplier=1&format=csv",
WMIPID, "&datasource=", datasource, "&",
param, "&start_time=", START, "&end_time=",
END, "&data_type=",type,"&interval=",interval,
"&report_time=",report,"&multiplier=1&format=csv", sep = "")
API <- httr::GET(WMIP_URL, timeout = 30)
WMIPData <- readr::read_csv(rawToChar(API$content))
if (grepl("error", names(WMIPData)[1])) {
WMIPData <- tibble::tibble("site" = WMIPID,
"varname" = param,
"var" = "error",
"time" = NA,
"value" = NA,
"quality" = NA,
)
} else {
WMIPData$time <- as.POSIXct(sprintf("%1.0f", WMIPData$time), format="%Y%m%d%H%M%S", origin = "1970-01-01")
}
return(WMIPData)
}
EuramoRainfall <- WMIP_Extract("113006A", START = format(as.POSIXct("2009-01-01 00:00"), "%Y%m%d"),
param = "Rainfall", type = "point", datasource = "AT")
library(dplyr)
WMIP_Extract <- function (WMIPID, START, param = "level", datasource = "AT",
END = format(Sys.Date() + 1, "%Y%m%d"),
type = "mean", interval = "hour", report = "start") {
stopifnot("type must be max, min, mean, end, tot, cum, inst, point" =
type %in% c( "max", "min", "mean", "end", "tot", "cum", "inst", "point" ) )
stopifnot("interval must be year, month, day, hour, minute, second" =
interval %in% c( "year", "month", "day", "hour", "minute", "second" ) )
stopifnot("report must be start or end" =
report %in% c( "start", "end") )
param <- dplyr::case_when(
param == "level" ~ "varfrom=100.00&varto=100.00",
param == "discharge" ~ "varfrom=100.00&varto=140.00",
#param == "preservedQ" ~ "varfrom=140.00&varto=140.00",
param == "rainfall" ~ "varfrom=10.00&varto=10.00",
#param == "temperature" ~ "varfrom=2080.00&varto=2080.00",
#param == "conductivity" ~ "varfrom=2010.00&varto=2010.00",
#param == "pH" ~ "varfrom=2100.00&varto=2100.00",
#param == "turbidity" ~ "varfrom=2030.00&varto=2030.00"
)
WMIP_URL <- paste("https://water-monitoring.information.qld.gov.au/cgi/webservice.pl?",
WMIPID, "&datasource=", datasource, "&",
param, "&start_time=", START, "&end_time=",
END, "&data_type=",type,"&interval=",interval,
"&report_time=",report,"&multiplier=1&format=csv", sep = "")
API <- httr::GET(WMIP_URL, timeout = 30)
WMIPData <- readr::read_csv(rawToChar(API$content))
if (grepl("error", names(WMIPData)[1])) {
WMIPData <- tibble::tibble("site" = WMIPID,
"varname" = param,
"var" = "error",
"time" = NA,
"value" = NA,
"quality" = NA,
)
} else {
WMIPData$time <- as.POSIXct(sprintf("%1.0f", WMIPData$time), format="%Y%m%d%H%M%S", origin = "1970-01-01")
}
return(WMIPData)
}
#
# EuramoRainfall <- WMIP_Extract("113006A", START = format(as.POSIXct("2009-01-01 00:00"), "%Y%m%d"),
#                         param = "Rainfall", type = "point", datasource = "AT")
#
# EuramoHt <- WMIP_Extract("113006A", START = format(as.POSIXct("2009-01-01 00:00"), "%Y%m%d"),
#                          param = "level", type = "point")
#
# # hourly totals until the hour
# EuramoRain <- WMIP_Extract("113006A", START = format(as.POSIXct("2009-01-01 00:00"), "%Y%m%d"),
#                            param = "rainfall", type = "tot", interval = "hour", report = "end")
# #EuramoRain <- EuramoRain %>% dplyr::filter(quality < 255)
#
# # hourly totals until the hour
# GorgeRain <- WMIP_Extract("113015A", START = format(as.POSIXct("2009-01-01 00:00"), "%Y%m%d"),
#                           param = "rainfall", type = "tot", interval = "hour", report = "end")
#
#
EuramoRainfall <- WMIP_Extract("113006A", START = format(as.POSIXct("2009-01-01 00:00"), "%Y%m%d"),
param = "Rainfall", type = "point", datasource = "AT")
mergeddataframe <- readRDS("C:/Users/wilsone1/Downloads/mergeddataframe.rds")
View(mergeddataframe)
