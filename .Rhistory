View(trg_dat)
trg_dat <- left_join(trg_h, trg_r, by = c("TRG_site" = "TRG_site", "time" = "time"))
tre_dat <- left_join(tre_h, tre_d, by = c("TRE_site" = "TRE_site", "time" = "time"))
tre_dat <- left_join(tre_dat, tre_r, by = c("TRE_site" = "TRE_site", "time" = "time"))
View(tre_dat)
# Data Wrangle
# Libraries
library(tidyverse)
library(lubridate)
library(dplyr)
library(readr)
# -----------------------------------------------------------
# 113004A Cochable Creek at Powerline
# Cochable_Creek height data
cc_h <- read_csv("Data/Raw/113004A.H.CSV") %>%
mutate(time = format(time, "%Y-%m-%d %H")) %>%
rename(height_metres_value = value) %>%
rename(height_metres_quality = quality)%>%
arrange(site, time) %>%
mutate(height_deriv_value = height_metres_value - lag(height_metres_value))
cc_h <- cc_h %>%
pivot_wider(
names_from = varname,
values_from = c(site, height_metres_value, height_deriv_value, height_metres_quality),
names_glue = "CC_{.value}"
) %>%
select(-var)
# Cochable_Creek discharge data
cc_d <- read_csv("Data/Raw/113004A.Q.CSV") %>%
mutate(time = format(time, "%Y-%m-%d %H")) %>%
rename(discharge_cumecs_value = value) %>%
rename(discharge_cumecs_quality = quality)
cc_d <- cc_d %>%
pivot_wider(
names_from = varname,
values_from = c(discharge_cumecs_value, discharge_cumecs_quality, site),
names_glue = "CC_{.value}"
) %>%
select(-var)
cc_dat <- left_join(cc_h, cc_d, by = c("CC_site" = "CC_site", "time" = "time"))
# --------------------------------------------------------------
# 113006A Tully River at Euramo
# Tully River at Euramo Rainfall data
tre_r <- read_csv("Data/Raw/113006A.R.CSV") %>%
mutate(time = format(time, "%Y-%m-%d %H")) %>%
rename(rainfall_mm_value = value) %>%
rename(rainfall_mm_quality = quality)
tre_r <- tre_r %>%
pivot_wider(
names_from = varname,
values_from = c(rainfall_mm_value, rainfall_mm_quality, site),
names_glue = "TRE_{.value}"
) %>%
select(-var)
# Tully River at Euramo Height data
tre_h <- read_csv("Data/Raw/113006A.H.CSV") %>%
mutate(time = format(time, "%Y-%m-%d %H")) %>%
rename(height_metres_value = value,
height_metres_quality = quality) %>%
arrange(site, time) %>%
mutate(height_deriv_value = height_metres_value - lag(height_metres_value)) %>%
pivot_wider(
names_from = varname,
values_from = c(site, height_metres_value, height_deriv_value, height_metres_quality),
names_glue = "TRE_{.value}"
) %>%
select(-var)
# Tully River at Euramo Discharge data
tre_d <- read_csv("Data/Raw/113006A.Q.CSV") %>%
mutate(time = format(time, "%Y-%m-%d %H")) %>%
rename(discharge_cumecs_value = value) %>%
rename(discharge_cumecs_quality = quality)
tre_d <- tre_d %>%
pivot_wider(
names_from = varname,
values_from = c(discharge_cumecs_value, discharge_cumecs_quality, site),
names_glue = "TRE_{.value}"
) %>%
select(-var)
tre_dat <- left_join(tre_h, tre_d, by = c("TRE_site" = "TRE_site", "time" = "time"))
tre_dat <- left_join(tre_dat, tre_r, by = c("TRE_site" = "TRE_site", "time" = "time"))
# ---------------------------------------------------
# 113015A Tully River at Tully Gorge National Park
# Tully River at Tully Gorge National Park Height data
trg_h <- read_csv("Data/Raw/113015A.H.CSV") %>%
mutate(time = format(time, "%Y-%m-%d %H")) %>%
rename(height_metres_value = value) %>%
rename(height_metres_quality = quality)%>%
arrange(site, time) %>%
mutate(height_deriv_value = height_metres_value - lag(height_metres_value))
trg_h <- trg_h %>%
pivot_wider(
names_from = varname,
values_from = c(site, height_metres_value, height_deriv_value, height_metres_quality),
names_glue = "TRG_{.value}"
) %>%
select(-var)
# Tully River at Tully Gorge National Park Rainfall data
trg_r <- read_csv("Data/Raw/113015A.R.CSV") %>%
mutate(time = format(time, "%Y-%m-%d %H")) %>%
rename(rainfall_mm_value = value) %>%
rename(rainfall_mm_quality = quality)
trg_r <- trg_r %>%
pivot_wider(
names_from = varname,
values_from = c(rainfall_mm_value, rainfall_mm_quality, site),
names_glue = "TRG_{.value}"
) %>%
select(-var)
# Tully River at Tully Gorge National Park Discharge data
trg_d <- read_csv("Data/Raw/113015A.Q.CSV") %>%
mutate(time = format(time, "%Y-%m-%d %H")) %>%
rename(discharge_cumecs_value = value) %>%
rename(discharge_cumecs_quality = quality)
trg_d <- trg_d %>%
pivot_wider(
names_from = varname,
values_from = c(discharge_cumecs_value, discharge_cumecs_quality, site),
names_glue = "TRG_{.value}"
) %>%
select(-var)
trg_dat <- left_join(trg_h, trg_d, by = c("TRG_site" = "TRG_site", "time" = "time"))
trg_dat <- left_join(trg_dat, trg_r, by = c("TRG_site" = "TRG_site", "time" = "time"))
# ------------------------------------------------------------
# 114001A Murray River at Upper Murray
# Murray River at Upper Murray Rainfall data
mru_r <- read_csv("Data/Raw/114001A.R.CSV") %>%
mutate(time = format(time, "%Y-%m-%d %H")) %>%
rename(rainfall_mm_value = value) %>%
rename(rainfall_mm_quality = quality)
mru_r <- mru_r %>%
pivot_wider(
names_from = varname,
values_from = c(rainfall_mm_value, rainfall_mm_quality, site),
names_glue = "MRU_{.value}"
) %>%
select(-var)
# ---------------------------------------------------------------
dat1 <- left_join(trg_dat, tre_dat, by = c("time" = "time"))
dat2 <- left_join(cc_dat, mru_r, by = c("time" = "time"))
dat <- left_join(dat1, dat2, by = c("time" = "time"))
# vis_miss(dat, warn_large_data = FALSE) #note only 3 cells have NAa, but they need to be removed
dat_na <- na.omit(dat) #remove the three rows with NA values
# vis_miss(dat_na, warn_large_data = FALSE) # data is 100% present
write_csv(dat, "Data/dat.csv")
dat_lag <- dat %>%  select(c(time, TRE_height_metres_value, TRG_rainfall_mm_value))
tibble(dat_lag)
dat_lag <- dat_lag %>%
mutate(
rain = TRG_rainfall_mm_value,
height = TRE_height_metres_value
)
model <- lm(height ~ rain, data = dat_lag)
plot(model)
dat_lag <- dat_lag %>%
mutate(
rain = TRG_rainfall_mm_value,
height = TRE_height_metres_value
)
library(tidyverse)
library(lubridate)
library(dplyr)
library(readr)
dat_lag <- dat %>%  select(c(time, TRE_height_metres_value, TRG_rainfall_mm_value))
dat_lag <- dat_lag %>%
mutate(
rain = TRG_rainfall_mm_value,
height = TRE_height_metres_value
)
model <- lm(height ~ rain, data = dat_lag)
plot(model)
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
library(shiny)
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
# Sample data frame 'dat_lag' (your actual data will be loaded instead)
dat_lag <- tibble(
time = seq(ymd_h("2008-11-01 00"), by = "hour", length.out = 100),
TRE_height_metres_value = c(rep(1.91, 10), runif(90, 1.9, 2.1)),
TRG_rainfall_mm_value = c(rep(0, 10), runif(90, 0, 5))
)
# UI
ui <- fluidPage(
titlePanel("Rainfall vs Height with Lag"),
sidebarLayout(
sidebarPanel(
sliderInput("lag", "Lag (hours):", min = 1, max = 24, value = 3),
actionButton("update", "Update Model")
),
mainPanel(
plotOutput("plot"),
verbatimTextOutput("model_summary")
)
)
)
# Server
server <- function(input, output, session) {
# Reactive expression to calculate shifted rainfall based on selected lag
reactive_data <- reactive({
dat_lag %>%
mutate(rain_shifted = lag(TRG_rainfall_mm_value, n = input$lag))
})
# Render the plot of Rainfall vs Height with the model
output$plot <- renderPlot({
data <- reactive_data()
# Fit the linear model
model <- lm(TRE_height_metres_value ~ rain_shifted, data = data)
# Plot the data and regression line
ggplot(data, aes(x = rain_shifted, y = TRE_height_metres_value)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE, color = "blue") +
labs(title = paste("Lag Time:", input$lag, "hours"),
x = "Rainfall (mm) at t-lag", y = "Height (m)")
})
# Show the model summary
output$model_summary <- renderPrint({
data <- reactive_data()
# Fit the linear model
model <- lm(TRE_height_metres_value ~ rain_shifted, data = data)
# Return model summary
summary(model)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Sample data frame 'dat_lag' (your actual data will be loaded instead)
dat_lag
dat_lag <- dat %>%  select(c(time, TRE_height_metres_value, TRG_rainfall_mm_value))
dat_lag <- dat_lag %>%
mutate(
rain = TRG_rainfall_mm_value,
height = TRE_height_metres_value
)
# Sample data frame 'dat_lag' (your actual data will be loaded instead)
dat_lag
dat_lag <- dat %>%  select(c(time, TRE_height_metres_value, TRG_rainfall_mm_value))
# Sample data frame 'dat_lag' (your actual data will be loaded instead)
dat_lag
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
# Sample data frame 'dat_lag' (your actual data will be loaded instead)
# dat_lag
# UI
ui <- fluidPage(
titlePanel("Rainfall vs Height with Lag"),
sidebarLayout(
sidebarPanel(
sliderInput("lag", "Lag (hours):", min = 1, max = 24, value = 3),
actionButton("update", "Update Model")
),
mainPanel(
plotOutput("plot"),
verbatimTextOutput("model_summary")
)
)
)
# Server
server <- function(input, output, session) {
# Reactive expression to calculate shifted rainfall based on selected lag
reactive_data <- reactive({
dat_lag %>%
mutate(rain_shifted = lag(TRG_rainfall_mm_value, n = input$lag))
})
# Render the plot of Rainfall vs Height with the model
output$plot <- renderPlot({
data <- reactive_data()
# Fit the linear model
model <- lm(TRE_height_metres_value ~ rain_shifted, data = data)
# Plot the data and regression line
ggplot(data, aes(x = rain_shifted, y = TRE_height_metres_value)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE, color = "blue") +
labs(title = paste("Lag Time:", input$lag, "hours"),
x = "Rainfall (mm) at t-lag", y = "Height (m)")
})
# Show the model summary
output$model_summary <- renderPrint({
data <- reactive_data()
# Fit the linear model
model <- lm(TRE_height_metres_value ~ rain_shifted, data = data)
# Return model summary
summary(model)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# 2. Prep data ----
dat <- read_csv("Data/dat.csv")
library(tidyverse)
# 2. Prep data ----
dat <- read_csv("Data/dat.csv")
# 2. Prep data ----
dat <- read_csv("Data/dat.csv")
dat$time <- as.POSIXct(dat$time, format = "%Y-%m-%d %H")
dat$year <- as.numeric(format(dat$time, "%Y"))
dat$month <- as.numeric(format(dat$time, "%m"))
dat$day <- as.numeric(format(dat$time, "%d"))
dat$hour <- as.numeric(format(dat$time, "%H"))
dat <- read_csv("Data/dat.csv")
# Note that catboost can't handle date/time strings
dat$time <- as.POSIXct(dat$time, format = "%Y-%m-%d %H")
dat$year <- as.numeric(format(dat$time, "%Y"))
dat$month <- as.numeric(format(dat$time, "%m"))
dat$day <- as.numeric(format(dat$time, "%d"))
dat$hour <- as.numeric(format(dat$time, "%H"))
# 3. Subset data ----
set.seed(123)
# Create a random sample
n <- nrow(dat)
train_idx <- sample(1:n, size = 0.6 * n)  # 60% for training
remaining <- setdiff(1:n, train_idx)      # Remaining 40%for test and validation
# Split remaining data into test (20%) and validation (20%)
test_idx <- sample(remaining, size = 0.5 * length(remaining)) # Uses 50% of left over data, e.g., 20% of original data
validate_idx <- setdiff(remaining, test_idx)
# Create the subsets
train_data <- dat[train_idx, ]
test_data <- dat[test_idx, ]
validate_data <- dat[validate_idx, ]
# Check that it split up correctly
cat("Train:", nrow(train_data), "rows\n")
cat("Test:", nrow(test_data), "rows\n")
cat("Validate:", nrow(validate_data), "rows\n")
View(dat)
unique(dat)
unique(colnames)
unique(colnames(dat))
View(train_data)
train_data$TRG_site <- as.factor(train_data$TRG_site)
train_data$TRE_site <- as.factor(train_data$TRE_site)
train_data$CC_site <- as.factor(train_data$CC_site)
train_data$MRU_site <- as.factor(train_data$MRU_site)
test_data$TRG_site <- as.factor(test_data$TRG_site)
test_data$TRE_site <- as.factor(test_data$TRE_site)
test_data$CC_site <- as.factor(test_data$CC_site)
test_data$MRU_site <- as.factor(test_data$MRU_site)
features <- setdiff(names(train_data), c(target,
"TRG_height_metres_quality", "TRG_discharge_cumecs_quality", "TRG_rainfall_mm_quality",
"TRE_height_metres_value", "TRE_height_metres_quality", "TRE_discharge_cumecs_quality",
"TRE_rainfall_mm_quality", "CC_height_metres_value", "CC_height_metres_quality",
"CC_discharge_cumecs_quality", "MRU_rainfall_mm_quality"))
# 4. Define features and target variable  ----
target <- c("level_metres")
features <- setdiff(names(train_data), c(target,
"TRG_height_metres_quality", "TRG_discharge_cumecs_quality", "TRG_rainfall_mm_quality",
"TRE_height_metres_value", "TRE_height_metres_quality", "TRE_discharge_cumecs_quality",
"TRE_rainfall_mm_quality", "CC_height_metres_value", "CC_height_metres_quality",
"CC_discharge_cumecs_quality", "MRU_rainfall_mm_quality"))
# Split into X (features) and Y (target)
x_train <- train_data[, features]  # Feature variables for training set
y_train <- train_data[, target]    # Target variable for training set
x_test <- test_data[, features]    # Feature variables for test set
y_test <- test_data[, target]      # Target variable for test set
# 5. Pool Data for CatBoost ----
train_pool <- catboost.load_pool(
data = x_train,
label = y_train)
test_pool <- catboost.load_pool(
data = x_test,
label = y_test)
# 6. Define Model Parameters ----
params <- list(
loss_function = "RMSE",  # "RMSE" being used for regression and for being able to keep the NA values
iterations = 1000,       # If overfitting = reduce iterations, if underfitting = increase iterations
depth = 6,               # Tree depth: common range 3-10, smaller values can prevent overfitting
learning_rate = 0.02,     # Lower range: 0.01 - 0.05, higher range: 0.1 - 0.3
verbose = 100,           # Show progress every 100 iterations
l2_leaf_reg = 10,        # L2 regularization parameter (higher values prevent overfitting)
random_seed = 42,        # Set random seed for reproducibility
early_stopping_rounds = 50
)
# 7. Train the Model ----
model <- catboost.train(train_pool, params = params)
# 1. Install + Load Packages ----
# library(devtools)
# library(remotes)
# library(renv)
# devtools::install_github('catboost/catboost', subdir = 'catboost/R-package')
library(catboost)
# 5. Pool Data for CatBoost ----
train_pool <- catboost.load_pool(
data = x_train,
label = y_train)
# Split into X (features) and Y (target)
x_train <- train_data[, features]  # Feature variables for training set
y_train <- train_data[, target]    # Target variable for training set
x_test <- test_data[, features]    # Feature variables for test set
y_test <- test_data[, target]      # Target variable for test set
# 2. Prep data ----
dat <- read_csv("Data/dat.csv")
# Note that catboost can't handle date/time strings
dat$time <- as.POSIXct(dat$time, format = "%Y-%m-%d %H")
dat$year <- as.numeric(format(dat$time, "%Y"))
dat$month <- as.numeric(format(dat$time, "%m"))
dat$day <- as.numeric(format(dat$time, "%d"))
dat$hour <- as.numeric(format(dat$time, "%H"))
# 3. Subset data ----
set.seed(123)
# Create a random sample
n <- nrow(dat)
train_idx <- sample(1:n, size = 0.6 * n)  # 60% for training
remaining <- setdiff(1:n, train_idx)      # Remaining 40%for test and validation
# Split remaining data into test (20%) and validation (20%)
test_idx <- sample(remaining, size = 0.5 * length(remaining)) # Uses 50% of left over data, e.g., 20% of original data
validate_idx <- setdiff(remaining, test_idx)
# Create the subsets
train_data <- dat[train_idx, ]
test_data <- dat[test_idx, ]
validate_data <- dat[validate_idx, ]
# Check that it split up correctly
cat("Train:", nrow(train_data), "rows\n")
cat("Test:", nrow(test_data), "rows\n")
cat("Validate:", nrow(validate_data), "rows\n")
# 4. Define features and target variable  ----
target <- c("level_metres")
features <- setdiff(names(train_data), c(target, # Exclude 'quality' columns and 'time' from features
"TRG_height_metres_quality", "TRG_discharge_cumecs_quality", "TRG_rainfall_mm_quality",
"TRE_height_metres_value", "TRE_height_metres_quality", "TRE_discharge_cumecs_quality",
"TRE_rainfall_mm_quality", "CC_height_metres_value", "CC_height_metres_quality",
"CC_discharge_cumecs_quality", "MRU_rainfall_mm_quality"))
# Convert categorical features to factor, the model should register that this is then a categorical variable bc it is a factor
train_data$TRG_site <- as.factor(train_data$TRG_site)
train_data$TRE_site <- as.factor(train_data$TRE_site)
train_data$CC_site <- as.factor(train_data$CC_site)
train_data$MRU_site <- as.factor(train_data$MRU_site)
test_data$TRG_site <- as.factor(test_data$TRG_site)
test_data$TRE_site <- as.factor(test_data$TRE_site)
test_data$CC_site <- as.factor(test_data$CC_site)
test_data$MRU_site <- as.factor(test_data$MRU_site)
# Split into X (features) and Y (target)
x_train <- train_data[, features]  # Feature variables for training set
y_train <- train_data[, target]    # Target variable for training set
# 4. Define features and target variable  ----
target <- c("TRE_height_metres_value")
features <- setdiff(names(train_data), c(target, # Exclude 'quality' columns and 'time' from features
"TRG_height_metres_quality", "TRG_discharge_cumecs_quality", "TRG_rainfall_mm_quality",
"TRE_height_metres_value", "TRE_height_metres_quality", "TRE_discharge_cumecs_quality",
"TRE_rainfall_mm_quality", "CC_height_metres_value", "CC_height_metres_quality",
"CC_discharge_cumecs_quality", "MRU_rainfall_mm_quality"))
# Convert categorical features to factor, the model should register that this is then a categorical variable bc it is a factor
train_data$TRG_site <- as.factor(train_data$TRG_site)
train_data$TRE_site <- as.factor(train_data$TRE_site)
train_data$CC_site <- as.factor(train_data$CC_site)
train_data$MRU_site <- as.factor(train_data$MRU_site)
test_data$TRG_site <- as.factor(test_data$TRG_site)
test_data$TRE_site <- as.factor(test_data$TRE_site)
test_data$CC_site <- as.factor(test_data$CC_site)
test_data$MRU_site <- as.factor(test_data$MRU_site)
# Split into X (features) and Y (target)
x_train <- train_data[, features]  # Feature variables for training set
y_train <- train_data[, target]    # Target variable for training set
x_test <- test_data[, features]    # Feature variables for test set
y_test <- test_data[, target]      # Target variable for test set
# 5. Pool Data for CatBoost ----
train_pool <- catboost.load_pool(
data = x_train,
label = y_train)
tibble(features)
tibble::tibble(feature = features) %>%
dplyr::mutate(type = purrr::map_chr(feature, ~ class(train_data[[.]])))
tibble::tibble(feature = features) %>%
dplyr::mutate(type = purrr::map_chr(feature, ~ class(train_data[[.x]])[1]))
features <- setdiff(names(train_data), c(target, # Exclude 'quality' columns and 'time' from features
"TRG_height_metres_quality", "TRG_discharge_cumecs_quality", "TRG_rainfall_mm_quality",
"TRE_height_metres_value", "TRE_height_metres_quality", "TRE_discharge_cumecs_quality",
"TRE_rainfall_mm_quality", "CC_height_metres_value", "CC_height_metres_quality",
"CC_discharge_cumecs_quality", "MRU_rainfall_mm_quality", "time"))
# Convert categorical features to factor, the model should register that this is then a categorical variable bc it is a factor
train_data$TRG_site <- as.factor(train_data$TRG_site)
train_data$TRE_site <- as.factor(train_data$TRE_site)
train_data$CC_site <- as.factor(train_data$CC_site)
train_data$MRU_site <- as.factor(train_data$MRU_site)
test_data$TRG_site <- as.factor(test_data$TRG_site)
test_data$TRE_site <- as.factor(test_data$TRE_site)
test_data$CC_site <- as.factor(test_data$CC_site)
test_data$MRU_site <- as.factor(test_data$MRU_site)
# Split into X (features) and Y (target)
x_train <- train_data[, features]  # Feature variables for training set
y_train <- train_data[, target]    # Target variable for training set
x_test <- test_data[, features]    # Feature variables for test set
y_test <- test_data[, target]      # Target variable for test set
# 5. Pool Data for CatBoost ----
train_pool <- catboost.load_pool(
data = x_train,
label = y_train)
test_pool <- catboost.load_pool(
data = x_test,
label = y_test)
# 6. Define Model Parameters ----
params <- list(
loss_function = "RMSE",  # "RMSE" being used for regression and for being able to keep the NA values
iterations = 1000,       # If overfitting = reduce iterations, if underfitting = increase iterations
depth = 6,               # Tree depth: common range 3-10, smaller values can prevent overfitting
learning_rate = 0.02,     # Lower range: 0.01 - 0.05, higher range: 0.1 - 0.3
verbose = 100,           # Show progress every 100 iterations
l2_leaf_reg = 10,        # L2 regularization parameter (higher values prevent overfitting)
random_seed = 42,        # Set random seed for reproducibility
early_stopping_rounds = 50
)
# 7. Train the Model ----
model <- catboost.train(train_pool, params = params)
# 8 Make predictions ----
predictions <- catboost.predict(model, test_pool)
# 9 Evaluate model performance ----
# library(Metrics)
rmse(y_test, predictions)
